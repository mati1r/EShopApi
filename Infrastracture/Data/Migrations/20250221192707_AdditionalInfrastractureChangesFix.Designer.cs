// <auto-generated />
using System;
using Infrastracture.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiTemplate.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250221192707_AdditionalInfrastractureChangesFix")]
    partial class AdditionalInfrastractureChangesFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.EShop.FilterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FilterType");
                });

            modelBuilder.Entity("Core.Models.EShop.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("StorageFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StorageFolder")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Core.Models.EShop.SubcategoryRefProductType", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("SubcategoryId", "ProductTypeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("SubcategoryRefProductType");
                });

            modelBuilder.Entity("Core.Models.Tokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<double>("SumPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description1")
                        .HasColumnType("longtext");

                    b.Property<string>("Description2")
                        .HasColumnType("longtext");

                    b.Property<string>("Description3")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionPhoto1")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionPhoto2")
                        .HasColumnType("longtext");

                    b.Property<bool>("Hidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProductValueId");

                    b.ToTable("ProductElements");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductRefHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Discount")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("DiscountPrecentage")
                        .HasColumnType("int");

                    b.Property<double>("OldPrice")
                        .HasColumnType("double");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "HistoryId");

                    b.HasIndex("HistoryId");

                    b.ToTable("ProductRefHistory");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FilterTypeId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductValues");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Core.Models.EShop.Photos", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Models.EShop.SubcategoryRefProductType", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.ProductType", "ProductType")
                        .WithMany("SubcategoryRefProductTypes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShopApi.Models.EShop.Subcategory", "Subcategory")
                        .WithMany("SubcategoryRefProductTypes")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Core.Models.Tokens", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.History", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.PaymentType", "PaymentType")
                        .WithMany("Histories")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Product", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductElement", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.Product", "Product")
                        .WithMany("ProductElements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShopApi.Models.EShop.ProductType", "ProductType")
                        .WithMany("ProductElements")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShopApi.Models.EShop.ProductValue", "ProductValue")
                        .WithMany("ProductElements")
                        .HasForeignKey("ProductValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductType");

                    b.Navigation("ProductValue");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductPhotos", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductRefHistory", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.History", "History")
                        .WithMany("ProductRefHistories")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShopApi.Models.EShop.Product", "Product")
                        .WithMany("ProductRefHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductType", b =>
                {
                    b.HasOne("Core.Models.EShop.FilterType", "FilterType")
                        .WithMany("ProductTypes")
                        .HasForeignKey("FilterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterType");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductValue", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.ProductType", "ProductType")
                        .WithMany("ProductValues")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Subcategory", b =>
                {
                    b.HasOne("EShopApi.Models.EShop.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Models.EShop.FilterType", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.History", b =>
                {
                    b.Navigation("ProductRefHistories");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.PaymentType", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Product", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ProductElements");

                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductRefHistory");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductType", b =>
                {
                    b.Navigation("ProductElements");

                    b.Navigation("ProductValues");

                    b.Navigation("SubcategoryRefProductTypes");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.ProductValue", b =>
                {
                    b.Navigation("ProductElements");
                });

            modelBuilder.Entity("EShopApi.Models.EShop.Subcategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubcategoryRefProductTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
